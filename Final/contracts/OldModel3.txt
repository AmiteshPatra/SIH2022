pragma solidity >=0.6.0;
pragma experimental ABIEncoderV2;

contract Model {
    
    mapping(string => string[]) public preprocessorHash;
    mapping(string => string[]) public manufacturerHash;

    string[] public raw_products;
    string public b;

    function addPreProcessorHashDetails(string memory _product_batch_no, string[] memory _raw_batch_no_arr) public {
        preprocessorHash[_product_batch_no] = _raw_batch_no_arr;
    }

    function addManufacturerHashDetails(string memory _product_batch_no, string[] memory _raw_batch_no_arr) public {
        manufacturerHash[_product_batch_no] = _raw_batch_no_arr;
    }

    struct FarmerDetails {
        string batch_no;
        string crop_name;
        string buyer_name;
        string location;
        string crop_quantity;
        string crop_selling_price;
        string selling_date;
        string crop_description;
    }

    mapping(string => FarmerDetails) public farmerDetailsMap;

    function addFarmerDetails(
        string memory _batch_no,
        string memory _crop_name,
        string memory _buyer_name,
        string memory _location,
        string memory _crop_quantity,
        string memory _crop_selling_price,
        string memory _selling_date,
        string memory _crop_description
    ) public {
        farmerDetailsMap[_batch_no] = FarmerDetails(
                                            _batch_no,
                                            _crop_name,
                                            _buyer_name,
                                            _location,
                                            _crop_quantity,
                                            _crop_selling_price,
                                            _selling_date,
                                            _crop_description);
    }

    struct PreProcessorDetails {
        string batch_no;
        string processed_product_quantity;
        string processed_product_selling_price;
        string processed_product_name;
        string processed_product_buyer_name;
        string processed_product_location;
        string processed_product_preocessing_date;
        string processed_product_selling_date;
        string processed_product_description;
        string[] raw_batch_no;
    }

    mapping(string => PreProcessorDetails) public preProcessorDetailsMap;

    function addPreProcessorDetails(
        string[3] memory _int_args,
        string[6] memory _string_args,
        string[] memory _raw_batch_no
    ) public {
        preProcessorDetailsMap[_string_args[0]] = PreProcessorDetails(
                                                    _int_args[0],
                                                    _int_args[1],
                                                    _int_args[2],
                                                    _string_args[0],
                                                    _string_args[1],
                                                    _string_args[2],
                                                    _string_args[3],
                                                    _string_args[4],
                                                    _string_args[5],
                                                    _raw_batch_no);
        
        addPreProcessorHashDetails(_int_args[0], _raw_batch_no);
    }

    struct ManufacturerDetails {
        string batch_no;                              //0
        string manufactured_product_quantity;         //1            
        string manufactured_product_mrp;              //2        
        string manufactured_product_selling_price;    //3                    
        string manufactured_product_name;           //4            
        string manufactured_product_buyer_name;     //5                
        string manufactured_product_loaction;       //6                
        string manufactured_product_selling_date;   //7                    
        string manufactured_product_mfg_date;       //8                
        string manufactured_product_exp_date;       //9                
        string manufactured_product_description;    //10                    
        string[] raw_batch_no;                        //11
    }

    mapping(string => ManufacturerDetails) public manufacturerDetailsMap;

    function addManufacturerDetails(
        string[4] memory _int_args,
        string[7] memory _string_args,
        string[] memory _raw_batch_no
    ) public {
        manufacturerDetailsMap[_string_args[0]] = ManufacturerDetails(
                                                    _string_args[0],
                                                    _string_args[1],
                                                    _string_args[2],
                                                    _string_args[3],
                                                    _string_args[0],
                                                    _string_args[1],
                                                    _string_args[2],
                                                    _string_args[3],
                                                    _string_args[4],
                                                    _string_args[5],
                                                    _string_args[6],
                                                    _raw_batch_no);

        addManufacturerHashDetails(_string_args[0], _raw_batch_no);
    }

    function getRawProductDetails(string memory _product_id) public {
        string[] memory processed_raw = manufacturerDetailsMap[_product_id].raw_batch_no;
        string[] memory temp;
        delete raw_products;
        for(uint i = 0; i < processed_raw.length; i++) {
            temp = preProcessorDetailsMap[processed_raw[i]].raw_batch_no;
            for(uint j = 0; j < temp.length; j++) {
                raw_products.push(temp[j]);
            }
        }
    }

    function returnRawProductDetails() public returns(string[] memory) {
        return raw_products;
    }

    function getRawProductDetailsString() public returns(string memory) {
        string memory no_potential_1am = raw_products[0];
        for(uint i = 1; i < raw_products.length; i++) {
            no_potential_1am = string(abi.encodePacked(no_potential_1am, ",", raw_products[i]));
        }
        return no_potential_1am;
    }
}
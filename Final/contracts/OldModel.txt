pragma solidity ^0.6.0;

import "hardhat/console.sol";

contract Model {
    
    mapping(uint => uint[]) public preprocessorHash;
    mapping(uint => uint[]) public manufacturerHash;

    function addPreProcessorHashDetails(uint _product_batch_no, uint[] memory _raw_batch_no_arr) public {
        preprocessorHash[_product_batch_no] = _raw_batch_no_arr;
    }

    function addManufacturerHashDetails(uint _product_batch_no, uint[] memory _raw_batch_no_arr) public {
        manufacturerHash[_product_batch_no] = _raw_batch_no_arr;
    }

    function getDetailsConsole(uint _final_product_batch_no) public view {
        uint[] memory pp_no = manufacturerHash[_final_product_batch_no];
        uint[] memory temp;
        uint count = 1;
        console.log("Raw Products :");
        for(uint i = 0; i < pp_no.length; i ++) {
            temp = preprocessorHash[pp_no[i]];
            for(uint j = 0; j < temp.length; j ++) {
                console.log(count ++, ". ", temp[j]);
            }
        }
        count = 1;
        console.log("Processed Products :");
        for(uint i = 0; i < pp_no.length; i ++) {
            console.log(count ++, ". ", pp_no[i]);
        }

        console.log("Final Products :");
        console.log("1 . ", _final_product_batch_no);
    }

    struct FarmerDetails {
        uint batch_no;
        string crop_name;
        uint crop_selling_price;
        uint crop_quantity;
    }

    mapping(address => mapping(uint => FarmerDetails)) public farmerDetailsMap;

    function addFarmerDetails(
        uint _batch_no,
        string memory _crop_name,
        uint _crop_selling_price,
        uint _crop_quantity
    ) public {
        address farmer_address = msg.sender;
        farmerDetailsMap[farmer_address][_batch_no] = FarmerDetails(
                                                    _batch_no,
                                                    _crop_name,
                                                    _crop_selling_price,
                                                    _crop_quantity);
    }

    struct PreProcessorDetails {
        uint batch_no;
        string processed_product_name;
        uint processed_product_selling_price;
        uint processed_product_quantity;
        address purchased_from;
        uint[] raw_batch_no;
    }

    mapping(address => mapping(uint => PreProcessorDetails)) public preProcessorDetailsMap;

    function addPreProcessorDetails(
        uint _batch_no,
        string memory _processed_product_name,
        uint _processed_product_selling_price,
        uint _processed_product_quantity,
        address _purchased_from,
        uint[] memory _raw_batch_no
    ) public {
        address pre_processor_address = msg.sender;

        preProcessorDetailsMap[pre_processor_address][_batch_no] = PreProcessorDetails(
                                                    _batch_no,
                                                    _processed_product_name,
                                                    _processed_product_selling_price,
                                                    _processed_product_quantity,
                                                    _purchased_from,
                                                    _raw_batch_no);
        
        addPreProcessorHashDetails(_batch_no, _raw_batch_no);
    }

    struct ManufacturerDetails {
        uint batch_no;
        string manufactured_product_name;
        uint manufactured_product_selling_price;
        uint manufactured_product_quantity;
        address purchased_from;
        uint[] raw_batch_no;
    }

    mapping(address => mapping(uint => ManufacturerDetails)) public manufacturerDetailsMap;

    function addManufacturerDetails(
        uint _batch_no,
        string memory _manufactured_product_name,
        uint _manufactured_product_selling_price,
        uint _manufactured_product_quantity,
        address _purchased_from,
        uint[] memory _raw_batch_no
    ) public {
        address manufacturer_address = msg.sender;
        manufacturerDetailsMap[manufacturer_address][_batch_no] = ManufacturerDetails(
                                                    _batch_no,
                                                    _manufactured_product_name,
                                                    _manufactured_product_selling_price,
                                                    _manufactured_product_quantity,
                                                    _purchased_from,
                                                    _raw_batch_no);

        addManufacturerHashDetails(_batch_no, _raw_batch_no);
    }

    function getDetailsOfProduct(uint _product_id) public view {
        getDetailsConsole(_product_id);
    }
}